/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void invert(TreeNode* root)
    {
        if(root->left==NULL && root->right==NULL) //Base condition to check if node is a leaf node
            return;
        swap(root->left,root->right);   //Swap left and right node
        if(root->left)
            invert(root->left);         //Recursively call left node if exists
        if(root->right)
            invert(root->right);        //Recursively call right node if exists
    }
    TreeNode* invertTree(TreeNode* root) {
        if(root==NULL)              //Base condition to check if tree is empty
            return root;
        invert(root);               //Invert the tree
        return root;                //Return root
    }
};
